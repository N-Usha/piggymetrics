# This workflow will build a docker container, publish it to Azure Container Registry, and deploy it to Azure Kubernetes Service.
#
# To configure this workflow:
#
# 1. Set up the following secrets in your workspace: 
#     a. REGISTRY_USERNAME with ACR username
#     b. REGISTRY_PASSWORD with ACR Password
#     c. AZURE_CREDENTIALS with the output of `az ad sp create-for-rbac --sdk-auth`
#
# 2. Change the values for the REGISTRY_NAME, CLUSTER_NAME, CLUSTER_RESOURCE_GROUP and NAMESPACE environment variables (below).

on: [push]

# Environment variables available to all jobs and steps in this workflow
env:
  REGISTRY_NAME: my-registry-name
  CLUSTER_NAME: aks4microservices
  CLUSTER_RESOURCE_GROUP: devops-java-microservices-to-aks
  NAMESPACE: piggymetrics
  CONTAINER_REGISTRY: javademosregistry
  MONGODB_DATABASE: piggymetrics
  RABBITMQ_RESOURCE_GROUP: rabbitmq
  RABBITMQ_USERNAME: rabbitmq
  RABBITMQ_HOST: 40.87.124.184
  RABBITMQ_PORT: 5672

  
jobs:
  deploy-to-aks:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master
    - uses: azure/docker-login@v1
      with:
        login-server: ${{ env.CONTAINER_REGISTRY }}.azurecr.io
        username: ${{ secrets.REGISTRY_USERNAME }} 
        password: ${{ secrets.REGISTRY_PASSWORD }}
    # Set the target Azure Kubernetes Service (AKS) cluster. 
    - uses: azure/aks-set-context@v1
      with:
        creds: '${{ secrets.AZURE_CREDENTIALS }}'
        cluster-name: ${{ env.CLUSTER_NAME }}
        resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}
    # Create namespace if doesn't exist
    - run: |
        kubectl create namespace ${{ env.NAMESPACE }} --dry-run -o json | kubectl apply -f -
    
    # Create imagepullsecret for Azure Container registry (ACR)
    - uses: azure/k8s-create-secret@v1
      with:
        container-registry-url: ${{ env.REGISTRY_NAME }}.azurecr.io
        container-registry-username: ${{ secrets.REGISTRY_USERNAME }}
        container-registry-password: ${{ secrets.REGISTRY_PASSWORD }}
        secret-name: ${{ env.REGISTRY_NAME }}-registry-connection
        namespace: ${{ env.NAMESPACE }}
    
    # Create generic secrets to be available on pods
    - uses: azure/k8s-create-secret@v1
      with:
        namespace: ${{ env.NAMESPACE }}
        secret-type: 'generic'
        arguments: --from-literal=key=${{ secrets.CONFIG_SERVICE_PASSWORD }} 
        secret-name: config_service_password
        
    - uses: azure/k8s-create-secret@v1
      with:
        namespace: ${{ env.NAMESPACE }}
        secret-type: 'generic'
        arguments: --from-literal=key=${{ secrets.NOTIFICATION_SERVICE_PASSWORD }} 
        secret-name: notification-service-password
        
    - uses: azure/k8s-create-secret@v1
      with:
        namespace: ${{ env.NAMESPACE }}
        secret-type: 'generic'
        arguments: --from-literal=key=${{ secrets.STATISTICS_SERVICE_PASSWORD }} 
        secret-name: statistics-service-password
        
    - uses: azure/k8s-create-secret@v1
      with:
        namespace: ${{ env.NAMESPACE }}
        secret-type: 'generic'
        arguments: --from-literal=key=${{ secrets.ACCOUNT_SERVICE_PASSWORD }} 
        secret-name: account-service-password
        
    - uses: azure/k8s-create-secret@v1
      with:
        namespace: ${{ env.NAMESPACE }}
        secret-type: 'generic'
        arguments: --from-literal=key=${{ secrets.MONGODB_URI }} 
        secret-name: mongodb-uri
           
    - uses: azure/k8s-create-secret@v1
      with:
        namespace: ${{ env.NAMESPACE }}
        secret-type: 'generic'
        arguments: --from-literal=key=${{ secrets.RABBITMQ_PASSWORD }} 
        secret-name: rabbitmq-password               
          
    
    # Baking the docker-compose file using Kompose to generate the manifests to deploy
    - uses: azure/k8s-bake@v1
      with:
        renderEngine: 'kompose'
        dockerComposeFile: './docker-compose.yml'
        kompose-version: 'latest'
      id: bake
      env:
          CONFIG_SERVICE_PASSWORD: ${{ secrets.CONFIG_SERVICE_PASSWORD }}
          NOTIFICATION_SERVICE_PASSWORD: ${{ secrets.NOTIFICATION_SERVICE_PASSWORD }}
          STATISTICS_SERVICE_PASSWORD: ${{ secrets.STATISTICS_SERVICE_PASSWORD }}
          ACCOUNT_SERVICE_PASSWORD: ${{ secrets.ACCOUNT_SERVICE_PASSWORD }}
          MONGODB_URI: ${{ secrets.MONGODB_URI }} 
          RABBITMQ_PASSWORD: ${{ secrets.RABBITMQ_PASSWORD }} 
#           MONGODB_DATABASE: piggymetrics
#           RABBITMQ_RESOURCE_GROUP: rabbitmq
#           RABBITMQ_USERNAME: rabbitmq
#           RABBITMQ_HOST: 40.87.124.184
#           RABBITMQ_PORT: 5672
          
    - run: |
        kubectl apply -f ${{ steps.bake.outputs.manifestsBundle }} -n ${{ env.NAMESPACE }}
        
    # Deploy app to AKS
#     - uses: azure/k8s-deploy@v1
#       with:
#         manifests: ${{ steps.bake.outputs.manifestsBundle }}
#         imagepullsecrets: |
#           ${{ env.CONTAINER_REGISTRY }}-registry-connection
#         namespace: ${{ env.NAMESPACE }}
